/** * @module w3c-eventtarget * @author Alexandre Morgaut (http://github.com/AMorgaut) * @sources http://github.com/AMorgaut/w3c-eventtarget **//** * @class EventTarget * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-EventTarget **/function EventTarget() {	var		bublingEvents,		captureEvents,		dispatchingEvents;	bublingEvents = {};	captureEvents = {};	dispatchingEvents = [];	/**	 * @method addEventListener	 * @param {string} type the Event.type associated with the event for which the user is registering	 * @param {EventListener|function} listener EventListener (or function) to be removed	 * @param {boolean} [useCapture] add the event listener for the capture and target phases only (default: false)	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-EventTarget-addEventListener	 **/	this.addEventListener = function addEventListener(type, listener, useCapture) {		var			list;		useCapture = Boolean(useCapture);		list = useCapture ? captureEvents : bublingEvents;		if (!list.hasOwnProperty(type)) {			list[type] = [];		}		list[type].push(listener);	};	/**	 * @method removeEventListener	 * @param {string} type the Event.type for which the user registered the event listener.	 * @param {EventListener|function} listener used as the callback for the event (directly or via handleEvent() method)	 * @param {boolean} [useCapture] add the event listener for the capture and target phases only (default: false)	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-EventTarget-addEventListener	 **/	this.removeEventListener = function removeEventListener(type, listener, useCapture) {		var			list,			index;		useCapture = Boolean(useCapture);		list = useCapture ? captureEvents : bublingEvents;		if (!list.hasOwnProperty(type)) {			return;		}		index = list[type].indexOf(listener);		if (index === -1) {			return;		}		list[type].splice(index, 1);	};	/**	 * @method dispatchEvent	 * @param {Event} event the event to be dispatched.	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-EventTarget-dispatchEvent	 **/	this.dispatchEvent = function dispatchEvent(event) {		var			DOMException,			InvalidStateError,			list;		DOMException = require('w3c-domcore-errors').DOMException;		if (!event.hasOwnProperty('type') || dispatchingEvents.indexOf(event) !== -1) {			InvalidStateError = new DOMException('InvalidStateError');			throw InvalidStateError;		}		dispatchingEvents.push(event);		list = event.eventPhase === event.CAPTURING_PHASE ? captureEvents : bublingEvents;		list[event.type].forEach(function (listener) {			if (typeof listener === 'object' && (listener instanceof EventListener || typeof listener.handleEvent === 'function')) {				// accept "EventListener like" objects				listener.handleEvent(event);			} else if (typeof listener === 'function') {				listener(event);			}		})		dispatchingEvents.splice(dispatchingEvents.indexOf(event), 1);		return !event.defaultPrevented;	}}exports.EventTarget = EventTarget;